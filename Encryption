public class Encryption {
    private byte[][] stateArray;
    private int[][] expandedKey; 
    
    //rcon constants used in key expansion
    public static final String[] rcon = {
        "01",
        "02",
        "04",
        "08",
        "10",
        "20",
        "40",
        "80",
        "1B",
        "36"
    };
    
    //sBox constants used in subBytes
    private static final int[] sBox = {0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67,
            0x2b, 0xfe, 0xd7, 0xab, 0x76, 0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59,
            0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0, 0xb7,
            0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1,
            0x71, 0xd8, 0x31, 0x15, 0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05,
            0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75, 0x09, 0x83,
            0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29,
            0xe3, 0x2f, 0x84, 0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b,
            0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf, 0xd0, 0xef, 0xaa,
            0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c,
            0x9f, 0xa8, 0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc,
            0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2, 0xcd, 0x0c, 0x13, 0xec,
            0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19,
            0x73, 0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee,
            0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb, 0xe0, 0x32, 0x3a, 0x0a, 0x49,
            0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79,
            0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4,
            0xea, 0x65, 0x7a, 0xae, 0x08, 0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6,
            0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a, 0x70,
            0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9,
            0x86, 0xc1, 0x1d, 0x9e, 0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e,
            0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf, 0x8c, 0xa1,
            0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0,
            0x54, 0xbb, 0x16};
    

    public String encrypt(String plaintext, String k) {
        //Assign stateArray to plaintext
        stateArray = new byte[4][4];
        int c = 0;
        int r = 0;
        for (int i = 0; i < 32; i += 2) {
            stateArray[r][c] = (byte) Integer.parseInt(plaintext.substring(i, i + 2), 16);
            if (r == 3) {
                r = 0;
                c ++;
            }
            else {
                r ++;
            }
        }

     
        
        
        // Display plaintext
        System.out.println("Plaintext: ");
        displayStateArray();
        System.out.println();


        //Assign values to expandedKey
        keySchedule(k);
        System.out.println();
        System.out.println("Original key: ");
        System.out.println(k);
        
        System.out.println("Expanded key: ");
        for (r = 0; r < expandedKey.length; r ++) {
            for (c = 0; c < expandedKey[0].length; c ++) {
                System.out.print(Integer.toHexString(expandedKey[r][c]));
            }
        }
        System.out.println();
        
        //xor stateArray with original key
        System.out.println();
        addRoundKey(0);
        System.out.println("State array after 0th round key: ");
        displayStateArray();
        System.out.println();
        
        for (int round = 1; round < 10; round ++) {
            //System.out.println("Start of Round " + round + ": ");
            //displayStateArray();
            
            subBytes();
            //System.out.println("After subBytes: ");
            //displayStateArray();
            
            shiftRows();
            //System.out.println("After shiftRows: ");
            //displayStateArray();
            
            mixColumns();
            //System.out.println("After mixColumns: ");
            //displayStateArray();
            
            addRoundKey(round);
            System.out.println("End of Round " + round + ": ");
            displayStateArray();
            System.out.println();
        }
        
        //Round 10 - no mixColumns
        subBytes();
        shiftRows();
        addRoundKey(10);
        System.out.println("Round 10: ");
        displayStateArray();
        
        
        //Display ciphertext
        System.out.println();
        System.out.println("Ciphertext: ");
        displayStateArray();
        
        //Return ciphertext
        String ciphertext = "";
        for (c = 0; c < 4; c ++) {
            for (r = 0; r < 4; r ++) {
                ciphertext += Integer.toHexString(stateArray[r][c] & 0xFF);
            }
        }
        return ciphertext;
        
        
        
    }
    
    public void displayStateArray() {
        System.out.println();
        System.out.println(stateArray);
        System.out.println("State Array in Row Major: ");
        for (int r = 0; r < 4; r ++) {
            for (int c = 0; c < 4; c ++) {
                System.out.print(Integer.toHexString(stateArray[r][c] & 0xFF) + " ");
                //System.out.print(Integer.toHexString(stateArray[r][c]) + " ");
                if (c == 3) {
                    System.out.println();
                }
            }
            
        }
        System.out.println();
        System.out.println("State Array in Column Major: ");
        
        String result = "";
        
        for (int c = 0; c < 4; c ++) {
            for (int r = 0; r < 4; r ++) {
                result += Integer.toHexString(stateArray[r][c] & 0xFF);
            }
            result += " ";
        }
        System.out.println(result);
        System.out.println();
    }
 

    //This function created by "hlilje" on GitHub (I don't understand the math)
    private static byte galoisMult(byte a, byte b) {
        int p = 0;
        int hiBitSet = 0;
        for (int i = 0; i < 8; ++i) {
            if ((b & 1) == 1)
                p ^= a;
            hiBitSet = a & 0x80;
            a <<= 1;
            if (hiBitSet == 0x80)
                a ^= 0x1b;
            b >>= 1;
        }
        return (byte) (p % 256);
    }

    public int[] xorTwoIntArrays(int[] first, int[] second) {
        int[] result = new int[4];
        for (int i = 0; i < 4; i ++) {
            result[i] = first[i] ^ second[i];
        }
        return result;
    } 
 
    public void keySchedule(String initialKey) {
        //Initialize roundConstantPointer
        int roundConstantPointer = 0;
        
        //Initialize expandedKey
        expandedKey = new int[44][4];
        
        //Assign first four rows of expandedKey to initialKey
        int index = 0;
        for (int r = 0; r < 4; r ++) {
            for (int c = 0; c < 4; c ++) {
                expandedKey[r][c] = Integer.parseInt(initialKey.substring(index, index + 2), 16);
                index += 2;
            }
        }
        
        //Assign values to rest of expandedKey
        for (int i = 4; i < 41; i += 4) {
            int[][] previous = new int[4][4];
            previous[0] = expandedKey[i - 4];
            previous[1] = expandedKey[i - 3];
            previous[2] = expandedKey[i - 2];
            previous[3] = expandedKey[i - 1];
            int[][] next = getNextFourWords(previous, roundConstantPointer);
            expandedKey[i] = next[0];
            expandedKey[i + 1] = next[1];
            expandedKey[i + 2] = next[2];
            expandedKey[i + 3] = next[3];
            roundConstantPointer ++;
        }
        
    }
    
    /* 
    Helper function in keySchedule
    */
    public int[][] getNextFourWords(int[][] previousFourWords, int roundConstantPointer) {
        int[][] nextFourWords = new int[4][4];
        nextFourWords[0] = xorTwoIntArrays(previousFourWords[0], gFunction(previousFourWords[3], roundConstantPointer));
        nextFourWords[1] = xorTwoIntArrays(nextFourWords[0], previousFourWords[1]);
        nextFourWords[2] = xorTwoIntArrays(nextFourWords[1], previousFourWords[2]);
        nextFourWords[3] = xorTwoIntArrays(nextFourWords[2], previousFourWords[3]);
        return nextFourWords;
    }
    
    /*
    For each 4th word in the expanded key, gFunction 
    (1) rotates the word, 
    (2) subs with sBox, 
    (3) xors each byte with an rcon constant
    */
    public int[] gFunction(int[] word, int roundConstantPointer) {
        int[] tmp = new int[4];
        //One-byte left circular rotation on word
        tmp[0] = word[1];
        tmp[1] = word[2];
        tmp[2] = word[3];
        tmp[3] = word[0];
        //Byte substitution for each byte using sBox
        int val;
        for (int i = 0; i < 4; i ++) {
            val = tmp[i];
            tmp[i] = sBox[val];
        }
        //xor bytes with round constant
        tmp[0] ^= Integer.parseInt(rcon[roundConstantPointer], 16);
        return tmp;
    } 

 
    /*
    Adds round key to stateArray via xor
    */
    public void addRoundKey(int round) {
        int[][] thisRoundKey = new int[4][4];
        //Get round key from expanded key
        for (int r = 0; r < 4; r ++) {
            for (int c = 0; c < 4; c ++) {
                thisRoundKey[r][c] = expandedKey[round * 4 + r][c];
            }
        }
        System.out.println("Round key for round " + round + ": ");
        
        for (int a = 0; a < 4; a ++) {
            for (int b = 0; b < 4; b ++) {
                System.out.print(Integer.toHexString(thisRoundKey[a][b]) + " ");
            }
        }
        System.out.println();
        
        //xor stateArray with roundKey
        for (int c = 0; c < 4; c ++) {
            for (int r = 0; r < 4; r ++) {
                stateArray[r][c] = (byte) ((char) stateArray[r][c] ^ thisRoundKey[c][r]);
            }
        }
    }
    
    /*
    Shifts rows in stateArray
    Row 0 is left untouched
    */
    public void shiftRows() {
        //Row 1 shifts 1 left
    	byte temp1 = stateArray[1][0];
    	for (int c = 0; c < 3; c ++) {
    		stateArray[1][c] = stateArray[1][c + 1];
    	}
    	stateArray[1][3] = temp1;
    
    	//Row 2 shifts 2 left
    	byte temp2 = stateArray[2][0];
    	byte temp3 = stateArray[2][1];
    	for (int c = 0; c < 2; c ++) {
    		stateArray[2][c] = stateArray[2][c + 2];
    	}
    	stateArray[2][2] = temp2;
    	stateArray[2][3] = temp3;
    	
    	//Row 3 shifts 3 left
    	byte temp4 = stateArray[3][3];
    	for (int c = 3; c > 0; c --) {
    		stateArray[3][c] = stateArray[3][c - 1];
    	}
    	stateArray[3][0] = temp4;
    }
    
    /*
    Substitutes bytes in stateArray using sBox
    */
    public void subBytes() {
        for (int r = 0; r < 4; r ++) {
            for (int c = 0; c < 4; c ++) {
                stateArray[r][c] = (byte) sBox[stateArray[r][c] & 0xff];
            }
        }
        
    }    
    
    /*
    Mix columns via galois multiplication
    */
    public void mixColumns() {
        byte[] tmpArray = new byte[4];
        for (int i = 0; i < 4; i ++) {
            for (int j = 0; j < 4; j ++) {
                tmpArray[j] = stateArray[j][i];
            }
            
            stateArray[0][i] = (byte) (galoisMult(tmpArray[0], (byte) 2) ^ galoisMult(tmpArray[1], (byte) 3) ^
                                   galoisMult(tmpArray[2], (byte) 1) ^ galoisMult(tmpArray[3], (byte) 1));
            stateArray[1][i] = (byte) (galoisMult(tmpArray[0], (byte) 1) ^ galoisMult(tmpArray[1], (byte) 2) ^
                                   galoisMult(tmpArray[2], (byte) 3) ^ galoisMult(tmpArray[3], (byte) 1));
            stateArray[2][i] = (byte) (galoisMult(tmpArray[0], (byte) 1) ^ galoisMult(tmpArray[1], (byte) 1) ^
                                   galoisMult(tmpArray[2], (byte) 2) ^ galoisMult(tmpArray[3], (byte) 3));
            stateArray[3][i] = (byte) (galoisMult(tmpArray[0], (byte) 3) ^ galoisMult(tmpArray[1], (byte) 1) ^
                                   galoisMult(tmpArray[2], (byte) 1) ^ galoisMult(tmpArray[3], (byte) 2));
        }
    }
}
